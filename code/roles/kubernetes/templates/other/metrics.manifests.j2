---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
spec:
  service:
    name: metrics-server
    namespace: kube-system
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:aggregated-metrics-reader
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:metrics-server
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
rules:
  - apiGroups: [""]
    resources:
      - nodes/metrics
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - pods
      - nodes
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:metrics-server
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: metrics-server:system:auth-delegator
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: metrics-server-reader
  namespace: kube-system
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: metrics-server
    namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: metrics
      app.kubernetes.io/instance: metrics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: metrics
        app.kubernetes.io/instance: metrics
    spec:
      serviceAccountName: metrics-server
      priorityClassName: system-cluster-critical
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-role
                operator: In
                values:
                - control-plane
                - master
            weight: 100
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: k8s-app
                  operator: In
                  values:
                  - kube-dns
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - name: metrics-server
        image: registry.k8s.io/metrics-server/metrics-server:v{{ metrics_version }}
        imagePullPolicy: IfNotPresent
        args:
          - --cert-dir=/tmp
          - --secure-port=10250
          - --kubelet-certificate-authority=/certs/kubelet-ca.crt
          - --kubelet-client-certificate=/certs/kubelet-client.crt
          - --kubelet-client-key=/certs/kubelet-client.key
          - --kubelet-preferred-address-types=InternalIP
          - --kubelet-use-node-status-port
          - --metric-resolution={{ metric_resolution }}
        resources:
          requests:
            cpu: 30m
            memory: 100Mi
          limits:
            cpu: 250m
            memory: 350Mi
        ports:
          - name: https
            containerPort: 10250
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: https
            scheme: HTTPS
          periodSeconds: 10
          failureThreshold: 3
          initialDelaySeconds: 20
        livenessProbe:
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
          periodSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
          runAsUser: 0
          runAsGroup: 0
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
          - name: tmp
            mountPath: /tmp
          - name: certs
            mountPath: /certs
            readOnly: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      tolerations:
      - operator: Exists
      volumes:
        - name: tmp
          emptyDir: {}
        - name: certs
          hostPath:
            path: "{{ kubernetes_conf_dir }}/pki"
            type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: metrics-server
  namespace: kube-system
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
    app.kubernetes.io/managed-by: Ansible
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: metrics
